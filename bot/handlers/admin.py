import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Filter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
import asyncpg
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.utils.states import BroadcastState, DirectMessage, PromoCodeCreation
from bot.utils.localization import get_text
from bot import config

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
class IsAdmin(Filter):
    def __init__(self) -> None:
        self.admin_ids = config.ADMINS

    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


async def get_admin_keyboard(lang_code: str) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    builder.row(
        InlineKeyboardButton(text=get_text(lang_code, 'admin_broadcast_button'), callback_data="admin_broadcast"),
        InlineKeyboardButton(text=get_text(lang_code, 'admin_write_to_user_button'), callback_data="admin_direct_message")
    )
    builder.row(InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo_menu"))
    return builder

@router.message(Command("admin"))
async def admin_panel_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    lang_code = 'ru' # –ê–¥–º–∏–Ω–∫–∞ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    keyboard = await get_admin_keyboard(lang_code)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard.as_markup())

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery, db_pool: asyncpg.Pool):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."""
    async with db_pool.acquire() as conn:
        total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
        total_channels = await conn.fetchval("SELECT COUNT(*) FROM channels")
        total_scenarios = await conn.fetchval("SELECT COUNT(*) FROM posting_scenarios")
        active_scenarios = await conn.fetchval("SELECT COUNT(*) FROM posting_scenarios WHERE is_active = TRUE")
        
    stats_text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üì¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n"
        f"‚öôÔ∏è –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: <b>{total_scenarios}</b> (<i>{active_scenarios} –∞–∫—Ç–∏–≤–Ω–æ</i>)"
    )
    await callback.message.edit_text(stats_text)
    await callback.answer()

# --- [–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ë–õ–û–ö –†–ê–°–°–´–õ–ö–ò] ---

async def _send_broadcast_message(bot: Bot, user_id: int, from_chat_id: int, message_id: int) -> bool:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ."""
    try:
        await bot.copy_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
        return True
    except Exception:
        return False

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastState.waiting_for_message)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await callback.answer()

@router.message(BroadcastState.waiting_for_message)
async def broadcast_message_handler(message: Message, state: FSMContext):
    await state.update_data(message_id=message.message_id, from_chat_id=message.chat.id)
    await state.set_state(BroadcastState.confirming_message)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    )
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=builder.as_markup())

@router.callback_query(F.data == "confirm_broadcast", BroadcastState.confirming_message)
async def confirm_broadcast_handler(callback: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool, bot: Bot):
    data = await state.get_data()
    message_id = data.get('message_id')
    from_chat_id = data.get('from_chat_id')
    await state.clear()

    if not message_id or not from_chat_id:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    async with db_pool.acquire() as conn:
        user_ids = await conn.fetch("SELECT user_id FROM users")

    sent_count = 0
    failed_count = 0
    total_users = len(user_ids)
    for i, record in enumerate(user_ids):
        if await _send_broadcast_message(bot, record['user_id'], from_chat_id, message_id):
            sent_count += 1
        else:
            failed_count += 1
        await asyncio.sleep(0.1)
        if (i + 1) % 25 == 0:
            try:
                await callback.message.edit_text(f"–ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_users}\n–û—à–∏–±–æ–∫: {failed_count}")
            except TelegramBadRequest: pass

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞)"
    )

@router.callback_query(F.data == "cancel_broadcast", BroadcastState.confirming_message)
async def cancel_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


# --- [–ù–û–í–´–ô –ë–õ–û–ö: –ü–†–Ø–ú–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ] ---

@router.callback_query(F.data == "admin_direct_message")
async def start_direct_message_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DirectMessage.waiting_for_user_id)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º (@username) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å.")
    await callback.answer()

@router.message(DirectMessage.waiting_for_user_id)
async def process_direct_message_user_id(message: Message, state: FSMContext):
    target_user = message.text.strip()
    await state.update_data(target_user=target_user)
    await state.set_state(DirectMessage.waiting_for_message)
    await message.answer(f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}.")

@router.message(DirectMessage.waiting_for_message)
async def process_direct_message_content(message: Message, state: FSMContext):
    data = await state.get_data()
    target_user = data.get('target_user')
    
    await state.update_data(message_id=message.message_id, from_chat_id=message.chat.id)
    await state.set_state(DirectMessage.confirming_message)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_direct_message"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_direct_message")
    )
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}?", reply_markup=builder.as_markup())

@router.callback_query(F.data == "confirm_direct_message", DirectMessage.confirming_message)
async def confirm_direct_message_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    target_user = data.get('target_user')
    message_id = data.get('message_id')
    from_chat_id = data.get('from_chat_id')
    await state.clear()

    if not all([target_user, message_id, from_chat_id]):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        await bot.copy_message(chat_id=target_user, from_chat_id=from_chat_id, message_id=message_id)
        await callback.message.edit_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@router.callback_query(F.data == "cancel_direct_message")
async def cancel_direct_message_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# --- [–ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê–ú–ò] ---

@router.callback_query(F.data == "admin_promo_menu")
async def promo_menu_handler(callback: CallbackQuery, db_pool: asyncpg.Pool):
    async with db_pool.acquire() as conn:
        promo_codes = await conn.fetch("SELECT * FROM promo_codes ORDER BY created_at DESC")
    
    text = "<b>üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
    if not promo_codes:
        text += "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ."
    else:
        for code in promo_codes:
            status = "‚úÖ" if code['is_active'] and code['uses_left'] > 0 else "‚ùå"
            text += f"{status} <code>{code['promo_code']}</code>: +{code['generations_awarded']} gen, –æ—Å—Ç–∞–ª–æ—Å—å {code['uses_left']}/{code['total_uses']} \n"
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚äï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="promo_create_start"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_handler(callback: CallbackQuery):
    keyboard = await get_admin_keyboard('ru')
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard.as_markup())
    await callback.answer()

@router.callback_query(F.data == "promo_create_start")
async def start_promo_creation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromoCodeCreation.waiting_for_name)
    await callback.message.edit_text("<b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `NEWYEAR2025`).")
    await callback.answer()

@router.message(PromoCodeCreation.waiting_for_name)
async def process_promo_name(message: Message, state: FSMContext):
    await state.update_data(promo_name=message.text.strip())
    await state.set_state(PromoCodeCreation.waiting_for_generations)
    await message.answer("<b>–®–∞–≥ 2/3:</b> –°–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?")

@router.message(PromoCodeCreation.waiting_for_generations)
async def process_promo_generations(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(generations=int(message.text))
    await state.set_state(PromoCodeCreation.waiting_for_uses)
    await message.answer("<b>–®–∞–≥ 3/3:</b> –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ (–æ–±—â–∏–π –ª–∏–º–∏—Ç)?")

@router.message(PromoCodeCreation.waiting_for_uses)
async def process_promo_uses(message: Message, state: FSMContext, db_pool: asyncpg.Pool):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    promo_name = data['promo_name']
    generations = data['generations']
    total_uses = int(message.text)
    
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                """INSERT INTO promo_codes (promo_code, generations_awarded, total_uses, uses_left, created_by)
                   VALUES ($1, $2, $3, $4, $5)""",
                promo_name, generations, total_uses, total_uses, message.from_user.id
            )
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_name}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except asyncpg.UniqueViolationError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    await state.clear()
    
    # "–§–µ–π–∫–æ–≤—ã–π" –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –±—ã–ª –±—ã —É callback.message
    mock_message = Message(message_id=0, date=message.date, chat=message.chat)
    cb_mock = CallbackQuery(id="mock", from_user=message.from_user, chat_instance="mock", message=mock_message, data="admin_promo_menu")
    await promo_menu_handler(cb_mock, db_pool)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "–∑–¥–æ—Ä–æ–≤—å—è" –±–æ—Ç–∞ ---
@router.message(Command("health"))
async def health_check_handler(message: Message, db_pool: asyncpg.Pool, scheduler: AsyncIOScheduler):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º:
    1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    2. –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á.
    """
    db_status = "‚ùå –û—à–∏–±–∫–∞"
    db_error = ""
    scheduler_status = "‚ùå –û—à–∏–±–∫–∞"
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        async with db_pool.acquire() as conn:
            await conn.fetchval("SELECT 1")
        db_status = "‚úÖ OK"
    except Exception as e:
        db_error = str(e)
        logging.error(f"Health Check: DB connection failed: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        if scheduler.running:
            scheduler_status = "‚úÖ OK (–∑–∞–ø—É—â–µ–Ω)"
        else:
            scheduler_status = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
    except Exception as e:
        scheduler_status = f"‚ùå –û—à–∏–±–∫–∞: {e}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    health_report = (
        "<b>ü©∫ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞</b>\n\n"
        f"<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL):</b> {db_status}\n"
        f"<b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (APScheduler):</b> {scheduler_status}\n"
    )
    if db_error:
        health_report += f"\n<i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –ë–î:</i> <pre>{db_error}</pre>"

    await message.answer(health_report)