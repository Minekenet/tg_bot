import asyncio
from aiogram import Router, F, Bot
from aiogram.filters import Filter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
import asyncpg

from bot.utils.states import BroadcastState
from bot.utils.localization import get_text
from bot import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
class IsAdmin(Filter):
    def __init__(self) -> None:
        self.admin_ids = config.ADMINS

    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

async def get_admin_keyboard(lang_code: str) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    builder.row(InlineKeyboardButton(text="üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast"))
    return builder

@router.message(Command("admin"))
async def admin_panel_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    lang_code = 'ru' # –ê–¥–º–∏–Ω–∫–∞ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    keyboard = await get_admin_keyboard(lang_code)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard.as_markup())

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery, db_pool: asyncpg.Pool):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."""
    async with db_pool.acquire() as conn:
        total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
        total_channels = await conn.fetchval("SELECT COUNT(*) FROM channels")
        total_scenarios = await conn.fetchval("SELECT COUNT(*) FROM posting_scenarios")
        active_scenarios = await conn.fetchval("SELECT COUNT(*) FROM posting_scenarios WHERE is_active = TRUE")
        
    stats_text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üì¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n"
        f"‚öôÔ∏è –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: <b>{total_scenarios}</b> (<i>{active_scenarios} –∞–∫—Ç–∏–≤–Ω–æ</i>)"
    )
    await callback.message.edit_text(stats_text)
    await callback.answer()

# –ë–ª–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(BroadcastState.waiting_for_message)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '–∫–∞–∫ –µ—Å—Ç—å' (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.).")
    await callback.answer()

@router.message(BroadcastState.waiting_for_message)
async def broadcast_message_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.update_data(message_to_send=message.model_dump())
    await state.set_state(BroadcastState.confirming_message)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    )
    await message.answer("–í–æ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=builder.as_markup())
    await message.copy_to(chat_id=message.chat.id)

@router.callback_query(F.data == "cancel_broadcast", BroadcastState.confirming_message)
async def cancel_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "confirm_broadcast", BroadcastState.confirming_message)
async def confirm_broadcast_handler(callback: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()
    message_data = data.get('message_to_send')
    await state.clear()

    if not message_data:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    message_to_send = Message(**message_data)
    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    async with db_pool.acquire() as conn:
        user_ids = await conn.fetch("SELECT user_id FROM users")

    sent_count = 0
    failed_count = 0
    total_users = len(user_ids)

    for i, record in enumerate(user_ids):
        user_id = record['user_id']
        try:
            await message_to_send.copy_to(chat_id=user_id)
            sent_count += 1
            await asyncio.sleep(0.1) 
        except Exception:
            failed_count += 1
        
        if (i + 1) % 25 == 0:
            try:
                await callback.message.edit_text(f"–ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_users}\n–û—à–∏–±–æ–∫: {failed_count}")
            except TelegramBadRequest:
                pass

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞)"
    )